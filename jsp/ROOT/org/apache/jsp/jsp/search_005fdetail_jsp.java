/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.59
 * Generated at: 2020-12-05 10:49:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.InputMismatchException;

public final class search_005fdetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.InputMismatchException");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"utf-8\">\r\n");
      out.write("  <title>search_detail</title>\r\n");
      out.write("  <script src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n");
      out.write("  <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/search_detail.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <header>\r\n");
      out.write("    <div class=\"logo\">\r\n");
      out.write("      <a href=\"main_page.jsp\">\r\n");
      out.write("      <img id=\"logo\" src=\"../img/logo.png\">\r\n");
      out.write("    </a>\r\n");
      out.write("    </div>\r\n");
      out.write("    <nav class=\"sub-nav\">\r\n");
      out.write("      <li class=\"dropdown\">\r\n");
      out.write("        <div class=\"manager-menu\">Manage</div>\r\n");
      out.write("        <div class=\"menu-content\">\r\n");
      out.write("          <a href=\"all_rating.jsp\">모든평가내역 확인</a>\r\n");
      out.write("          <a href=\"upload_movie.jsp\">영상올리기</a>\r\n");
      out.write("          <a href=\"change_movie.jsp\">영상수정</a>\r\n");
      out.write("          <a href=\"../change_mbship.html\">회원등급 변경</a>\r\n");
      out.write("        </div>\r\n");
      out.write("      </li>\r\n");
      out.write("      <li class=\"dropdown\">\r\n");
      out.write("        <div class=\"account-menu\">Account</div>\r\n");
      out.write("        <div class=\"menu-content\">\r\n");
      out.write("          <a href=\"rating.jsp\">내가내린평가</a>\r\n");
      out.write("          <a href=\"../change_pw.html\">비밀번호변경</a>\r\n");
      out.write("          <a href=\"../change_info.html\">개인정보수정</a>\r\n");
      out.write("          <a href=\"../withdraw.html\">회원탈퇴</a>\r\n");
      out.write("          <a href=\"logout.jsp\">로그아웃</a>\r\n");
      out.write("        </div>\r\n");
      out.write("      </li>\r\n");
      out.write("    </nav>\r\n");
      out.write("  </header>\r\n");
      out.write("  <div class=\"main\">\r\n");

	String driver = "oracle.jdbc.driver.OracleDriver";
	String url = "jdbc:oracle:thin:@localhost:1521:orcl";
	Statement stst;
	String user = "movie";
	String pass = "movie";
	Connection conn = null;
	Statement stmt = null;
	ResultSet rs = null;
	String sql = "";
	String sqlv ="";
	//앞에서 입력한 값을 가져오기 위해서 먼저 선언을 해줍니다.
	String title;
	String[] version;
	String movie_type;
	String[] genre;
	String min_c = "0", max_c = "10000";
	
	
	StringBuffer sb = new StringBuffer();
	int Ccnt; //추가된 조건 갯수
	int Vcnt; // version 선택유무
	int min = 0;
	int max = 0;
	Class.forName(driver);
	//DB에 접속을 한다.
	conn = DriverManager.getConnection(url,user,pass);

//전 화면으로부터 form문을 통해서 name을 받아오는 소스가 있습니다.
	title = request.getParameter("name");
	version = request.getParameterValues("version");
	movie_type = request.getParameter("movie_type");
	genre = request.getParameterValues("genre");
	
	try {
		min_c = request.getParameter("min");
		min = Integer.parseInt(min_c);
		max_c = request.getParameter("max");
		max = Integer.parseInt(max_c);
	}catch(NumberFormatException e){
		System.out.println("NumberFormatException");
	}
	Ccnt = 0;
	Vcnt = 0;
	String id = (String)session.getAttribute("id");
	boolean resultType = false;

	sql = "SELECT DISTINCT Tconst, Title, Title_type, Is_adult, Runtime_minutes FROM MOVIE, GENRE, VERSION WHERE "
           + "tconst NOT IN (SELECT tcon FROM RATING R, PROVIDES P WHERE A_ID = '" + id + "' AND P.R_ID = R.R_ID)";
	sqlv = "SELECT DISTINCT Tconst, Title, Title_type, Is_adult, Runtime_minutes, VERSION.tcon, VERSION.original_title FROM MOVIE, GENRE, VERSION WHERE "
            + "tconst NOT IN (SELECT tcon FROM RATING R, PROVIDES P WHERE A_ID = '" + id + "' AND P.R_ID = R.R_ID)";
	
	
	if(title==null||title.trim().equals("")){
		//System.out.println("선택된 버전 개수 : " + version.length);
		//System.out.println("선택된 장르 개수 : " + genre.length);
		int i;
		
		//System.out.println("version.length : " + version.length);
		
		
		
		if ( version == null ){ //상관없음 선택한 경우
			sb.append(sql);
		}else{ //버전을 선택한 경우 version.length만큼 각각 where문에서 조건을 반복 추가해야한다.
			resultType = true;
			sb.append(sqlv);
		
			for(i = 0; i < version.length ; i++ ){
				if(i == 0){//첫번째 부분
						sb.append("AND (VERSION.nation = '" + version[i] + "'");
				}else{
					sb.append("OR VERSION.nation = '" + version[i] + "'");
				}
				Ccnt++;
				Vcnt++;
			}
			sb.append(" AND VERSION.Tcon = MOVIE.Tconst )");
		}
		
		
		//선택된 무비 타입 sql에 추가.
		if ( movie_type.equals("movie") ){ //movie선택
			sb.append(" AND title_type = '" + movie_type + "'");
			Ccnt++;
		}
		if ( movie_type.equals("tv_series") ){ //movie선택
			sb.append(" AND title_type = '" + movie_type + "'");
			Ccnt++;
		}
		if ( movie_type.equals("knuMovieDB_Original") ){ //movie선택
			sb.append(" AND title_type = '" + movie_type + "'");
			Ccnt++;
		}
		

		String gCode = "";
		int gCnt = 0;
		int j;
		//상관없음인 경우, 그렇지 않은경우(중복선택가능)
		//장르 상관없음인 경우(1개 선택, 값이 null or "" ), 그렇지 않은경우(중복선택가능)

		if ( genre == null ){
			
		}else{
			for(j = 0; j < genre.length ; j++ ){ 
				gCode = genre[j];
				if(j == 0){//첫번째 부분
					sb.append(" AND (MOVIE.gCode = '" + gCode + "'");
					gCnt++;
				}else{
					sb.append(" OR MOVIE.gCode = '" + gCode + "'");
					gCnt++;
				}
			}
			if(gCnt>0){
				sb.append(" )");	
			}
		}
		
		
		//runtime 받는 부분.
		if ( min >= max ) {
			
      out.write("\r\n");
      out.write("\t\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\talert(\"runtime의 최소 시간을 최대시간보다 작게 설정하세요.\");\r\n");
      out.write("\t\t\t\thistory.back();\r\n");
      out.write("\t\t\t</script>\r\n");
      out.write("\t\t\t");

		}
		else{
			 sb.append(" AND ( MOVIE.Runtime_minutes >= " + min_c + " and MOVIE.Runtime_minutes <= " + max_c + ")");
		}

		if( Vcnt == 0){
			sb.append(" ORDER BY tconst");
		}
		else{
			sb.append(" ORDER BY tcon");
		}
		sql = sb.toString();
		sb.setLength(0);
	}else {
		sql = "select Tconst, Title, Title_type, Is_adult, Runtime_minutes from MOVIE where title LIKE '%" + title + "%' AND " +
		" tconst NOT IN (SELECT tcon FROM RATING R, PROVIDES P WHERE A_ID = '" + id + "' AND P.R_ID = R.R_ID)";
	}
	
	
      out.write("\r\n");
      out.write("\t<div class=\"table-title\">\r\n");
      out.write("          <h1>검색결과</h1>\r\n");
      out.write("      </div>\r\n");
      out.write("      <table class=\"table-fill\">\r\n");
      out.write("      <thead>\r\n");
      out.write("          <tr>\r\n");
      out.write("              <th class=\"text-left\">영상 제목</th>\r\n");
      out.write("              <th class=\"text-center\">영상 타입</th>\r\n");
      out.write("              <th class=\"text-center\">성인물 여부</th>\r\n");
      out.write("              <th class=\"text-center\">상영 시간</th>\r\n");
      out.write("\t\t\t  ");

			  	if(resultType){
					  out.println("<th class=\"text-center\">원제</th>");
				  }
			  
      out.write("\r\n");
      out.write("          </tr>\r\n");
      out.write("\t</thead>\r\n");
      out.write("\t");

	// 데이터 베이스 연결
	try {
		System.out.println(sql);
		
		stmt = conn.createStatement();
		rs = stmt.executeQuery(sql);
		//해당 값의 개수를 가져옵니다.
		//rs에서 값을 가져올 때에는 타입에 맞게 getString, getInt 처럼 가져올 수 있다.

		if(!rs.isBeforeFirst()){
			out.println("검색 결과가 없습니다.");
		}
		
		while(rs.next()){
			out.println("<tr class=\"table\" id=\"" + rs.getString(1) + "\">");
			out.println("<td class=\"text-left\">" + rs.getString(2) + "</th>");
			out.println("<td class=\"text-center\">" + rs.getString(3) + "</th>");
			out.println("<td class=\"text-center\">" + rs.getString(4) + "</th>");
			out.println("<td class=\"text-center\">" + rs.getString(5) + "</th>");
			if(resultType){
				out.println("<td class=\"text-center\">" + rs.getString(7) + "</th>");
			}
			out.println("</tr>");
		}
		
		out.println("</table>");
		rs.close();
	}catch (Exception c){
		System.out.println(c.getMessage());
	}finally{
		stmt.close();
		conn.close();
	}


      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("  $(document).ready(function(){\r\n");
      out.write("    var admin = localStorage.getItem(\"admin\");\r\n");
      out.write("    if(admin == null){\r\n");
      out.write("      location.href='../index.html';\r\n");
      out.write("    }\r\n");
      out.write("    if(admin == 'customer'){\r\n");
      out.write("      $(\".manager-menu\").css(\"display\",\"none\");\r\n");
      out.write("    }\r\n");
      out.write("    $(\".table\").click(function() {\r\n");
      out.write("      location.href=\"movie_detail.jsp?tconst=\"+$(this).attr('id');\r\n");
      out.write("    });\r\n");
      out.write("  });\r\n");
      out.write("</script>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
