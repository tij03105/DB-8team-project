/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.59
 * Generated at: 2020-11-24 08:59:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.*;
import java.sql.*;

public final class sign_005fup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("        ");

		String serverIP = "localhost";
		String strSID = "orcl";
		String portNum = "1521";
		String user = "movie";
		String pass = "movie";
		String url = "jdbc:oracle:thin:@"+serverIP+":"+portNum+":"+strSID;
		Connection conn = null;
		PreparedStatement pstmt;
        Statement stmt;
		ResultSet rs;
		Class.forName("oracle.jdbc.driver.OracleDriver");
        conn = DriverManager.getConnection(url,user,pass);
        stmt = conn.createStatement();

        request.setCharacterEncoding("UTF-8");

        String id = request.getParameter("id");
        String password = request.getParameter("pass");
        String checkPass = request.getParameter("checkPass");
        String phone = request.getParameter("phone");
        String name = request.getParameter("name");
        String addr = request.getParameter("address");
        String job = request.getParameter("job");
        String sex = request.getParameter("sex");
        String date = request.getParameter("date");
        String membership = "Basic";
        final int act_limit = 3, rat_limit = 10;

        /* ID중복성 체크 */
        String sql = "SELECT id FROM ACCOUNT WHERE id = '" + id + "'";
        rs = stmt.executeQuery(sql);
        if(rs.next()) {
            out.println("<script>");
            out.println("alert('id가 이미 존재합니다.')");
            out.println("location.href='../sign_up.html'");
            out.println("</script>");
            return;
        }
        
        if(id.length() > 15){
            out.println("<script>");
            out.println("alert('id는 15자리 이하입니다.')");
            out.println("location.href='../sign_up.html'");
            out.println("</script>");
            return;
        }

        if(!password.equals(checkPass)){
            out.println("<script>");
            out.println("alert('비밀번호가 다릅니다.')");
            out.println("location.href='../sign_up.html'");
            out.println("</script>");
            return;
        }

        if(password.length() > 20){
            out.println("<script>");
            out.println("alert('비밀번호는 20자리 이하입니다.')");
            out.println("location.href='../sign_up.html'");
            out.println("</script>");
            return;
        }

        if(name.length() > 20){
            out.println("<script>");
            out.println("alert('이름은 20자리 이하입니다.')");
            out.println("location.href='../sign_up.html'");
            out.println("</script>");
            return;
        }

        if(!phone.matches("[0-9]+") || phone.length() != 11){
            out.println("<script>");
            out.println("alert('잘못된 전화번호입니다.')");
            out.println("location.href='../sign_up.html'");
            out.println("</script>");
            return;
        }

        if(!(date.equals("") || date.matches("[0-9]*") && date.length() == 8)){
            out.println("<script>");
            out.println("alert('생년월일이 잘못되었습니다.')");
            out.println("location.href='../sign_up.html'");
            out.println("</script>");
            return;
        }
        
        if(addr.length()>30){
            out.println("<script>");
            out.println("alert('주소는 30자리이하입니다.')");
            out.println("location.href='../sign_up.html'");
            out.println("</script>");
            return;
        }

        if(job.length()>15){
            out.println("<script>");
            out.println("alert('주소는 15자리이하입니다.')");
            out.println("location.href='../sign_up.html'");
            out.println("</script>");
            return;
        }

        /* 삽입을 위한 SQL문 */
        sql = "INSERT INTO ACCOUNT VALUES ('" + id + "', '" + password + "', '" + phone + "', '" + name + "',";
        if(addr.equals("")) sql += "NULL, ";
        else sql += "'" + addr + "', ";

        if(sex.equals("성별선택")) sql += "NULL, ";
        else if(sex.equals("남자")) sql += "'M', ";
        else sql += "'F', ";

        if(date.equals("")) sql += "NULL, ";
        else sql += "TO_DATE('" + date.substring(0,4) + "-" + date.substring(4,6) + "-" + date.substring(6) + "', 'yyyy-mm-dd'), ";

        if(job.equals("")) sql += "NULL, ";
        else sql += "'" + job + "', ";
        sql += "'" + membership + "', " + act_limit + ", " + rat_limit + ")";

        out.println(sql);
        pstmt = conn.prepareStatement(sql);
        rs = pstmt.executeQuery();
        out.println("<script>");
        out.println("alert('가입이 완료되었습니다.')");
        out.println("location.href='../index.html'");
        out.println("</script>");
    
      out.write("\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
